// Generated by CoffeeScript 1.7.1
(function() {
  var OutputPlugin, aws, option;

  aws = require('aws-sdk');

  OutputPlugin = (function() {
    function OutputPlugin(option) {
      var table, _i, _len, _ref;
      if (option == null) {
        option = {};
      }
      if (option.awsCredential) {
        aws.config.loadFromPath(option.awsCredential);
      }
      if (option.dynamo) {
        this.dynamo = new aws.DynamoDB;
        if (typeof option.dynamo === 'object') {
          _ref = option.dynamo;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            table = _ref[_i];
            this.dynamoConfig(table);
          }
        } else {
          this.dynamoConfig(option.dynamo);
        }
      }
      if (option.logType) {
        this.logType = option.logType;
      }
    }

    OutputPlugin.prototype.convert = function(log, callback) {
      var error;
      if (this.logType) {
        return this.selectType(this.logType, log, callback);
      } else {
        try {
          return callback(null, JSON.parse(log));
        } catch (_error) {
          error = _error;
          return callback(error);
        }
      }
    };

    OutputPlugin.prototype.selectType = function(type, log, callback) {
      switch (type) {
        case 'tsv':
          return this.tsvParse(log, callback);
        case 'csv':
          return this.csvParse(log, callback);
        default:
          console.log('not supported type');
          return callback('not supported type');
      }
    };

    OutputPlugin.prototype.emit = function(log) {
      return console.log(this.convert(log.data));
    };

    OutputPlugin.prototype.tsvParse = function(log, callback) {
      var array, error, item, key, kv, result, val, _i, _len;
      try {
        array = log.split('\t');
        result = [];
        for (_i = 0, _len = array.length; _i < _len; _i++) {
          item = array[_i];
          kv = item.split(':');
          key = kv[0];
          val = kv.slice(1).join(':');
          result[key] = val;
        }
        return callback(null, result);
      } catch (_error) {
        error = _error;
        return callback(error);
      }
    };

    OutputPlugin.prototype.csvParse = function(log) {
      var array, error, item, key, kv, result, val, _i, _len;
      try {
        array = log.split(',');
        result = [];
        for (_i = 0, _len = array.length; _i < _len; _i++) {
          item = array[_i];
          kv = item.split(':');
          key = kv[0];
          val = kv.slice(1).join(':');
          result[key] = val;
        }
        return callback(null, result);
      } catch (_error) {
        error = _error;
        return callback(error);
      }
    };

    OutputPlugin.prototype.config = {
      awsCredential: function(path) {
        return aws.config.loadFromPath(path);
      }
    };

    OutputPlugin.prototype.dynamoConfig = function(table) {
      this[table] = {};
      this[table].putItem = (function(_this) {
        return function(item, callback) {
          var putParams;
          putParams = {
            TableName: table,
            Item: item
          };
          return _this.dynamo.putItem(putParams, function(err, data) {
            if (err) {
              return callback(err);
            } else {
              return callback(null, data);
            }
          });
        };
      })(this);
      this[table].getItem = (function(_this) {
        return function(option, callback) {
          var getParams;
          getParams = {
            TableName: table,
            Key: option.Key
          };
          if (option.AttributesToGet) {
            getParams.AttributesToGet = option.AttributesToGet;
          }
          return _this.dynamo.getItem(getParams, function(err, data) {
            if (err) {
              return callback(err);
            } else {
              return callback(null, data);
            }
          });
        };
      })(this);
      return this[table].increment = (function(_this) {
        return function(item, callback) {
          var key, updateParams, _i, _len, _ref;
          updateParams = {
            TableName: table,
            Key: item.getKey,
            AttributeUpdates: {},
            Expected: {}
          };
          if (Object.keys(item.getKey).length > 1) {
            updateParams.ConditionalOperator = 'AND';
          }
          _ref = Object.keys(item.getKey);
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            key = _ref[_i];
            updateParams.Expected[key] = {
              Value: item.getKey[key],
              Exists: true
            };
          }
          updateParams.AttributeUpdates[item.updateAttribute] = {
            Action: 'ADD',
            Value: {
              N: '1'
            }
          };
          return _this.dynamo.updateItem(updateParams, function(err, data) {
            var putParams;
            if (err) {
              putParams = {
                TableName: table,
                Item: item.Key
              };
              return _this.dynamo.putItem(putParams, function(err, data) {
                if (err) {
                  return callback(err);
                } else {
                  return callback(null, data);
                }
              });
            } else {
              return callback(null, data);
            }
          });
        };
      })(this);
    };

    return OutputPlugin;

  })();

  option = {
    awsCredential: '/Users/tomoya/git-lab/lambda-driver/config/aws_credentials.json',
    dynamo: 'sometracking'
  };

  module.exports = OutputPlugin;

}).call(this);
